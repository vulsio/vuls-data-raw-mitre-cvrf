{
	"title": "CVE-2023-40015",
	"cve": "CVE-2023-40015",
	"notes": [
		{
			"type": "Description",
			"text": "Vyper is a Pythonic Smart Contract Language. For the following (probably non-exhaustive) list of expressions, the compiler evaluates the arguments from right to left instead of left to right. `unsafe_add, unsafe_sub, unsafe_mul, unsafe_div, pow_mod256, |, &, ^ (bitwise operators), bitwise_or (deprecated), bitwise_and (deprecated), bitwise_xor (deprecated), raw_call, <, >, <=, >=, ==, !=, in, not in (when lhs and rhs are enums)`. This behaviour becomes a problem when the evaluation of one of the arguments produces side effects that other arguments depend on. The following expressions can produce side-effect: state modifying external call , state modifying internal call, `raw_call`, `pop()` when used on a Dynamic Array stored in the storage, `create_minimal_proxy_to`, `create_copy_of`, `create_from_blueprint`. This issue has not yet been patched. Users are advised to make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects."
		},
		{
			"title": "Published",
			"type": "Other",
			"text": "2023-09-04"
		},
		{
			"title": "Modified",
			"type": "Other",
			"text": "2023-09-04"
		}
	],
	"references": [
		{
			"url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf",
			"description": "MISC:https://github.com/vyperlang/vyper/security/advisories/GHSA-g2xh-c426-v8mf"
		}
	]
}
