{
	"title": "CVE-2023-52527",
	"cve": "CVE-2023-52527",
	"notes": [
		{
			"type": "Description",
			"text": "In the Linux kernel, the following vulnerability has been resolved: ipv4, ipv6: Fix handling of transhdrlen in __ip{,6}_append_data() Including the transhdrlen in length is a problem when the packet is partially filled (e.g. something like send(MSG_MORE) happened previously) when appending to an IPv4 or IPv6 packet as we don't want to repeat the transport header or account for it twice. This can happen under some circumstances, such as splicing into an L2TP socket. The symptom observed is a warning in __ip6_append_data(): WARNING: CPU: 1 PID: 5042 at net/ipv6/ip6_output.c:1800 __ip6_append_data.isra.0+0x1be8/0x47f0 net/ipv6/ip6_output.c:1800 that occurs when MSG_SPLICE_PAGES is used to append more data to an already partially occupied skbuff. The warning occurs when 'copy' is larger than the amount of data in the message iterator. This is because the requested length includes the transport header length when it shouldn't. This can be triggered by, for example: sfd = socket(AF_INET6, SOCK_DGRAM, IPPROTO_L2TP); bind(sfd, ...); // ::1 connect(sfd, ...); // ::1 port 7 send(sfd, buffer, 4100, MSG_MORE); sendfile(sfd, dfd, NULL, 1024); Fix this by only adding transhdrlen into the length if the write queue is empty in l2tp_ip6_sendmsg(), analogously to how UDP does things. l2tp_ip_sendmsg() looks like it won't suffer from this problem as it builds the UDP packet itself."
		},
		{
			"title": "Published",
			"type": "Other",
			"text": "2024-03-02"
		},
		{
			"title": "Modified",
			"type": "Other",
			"text": "2024-05-28"
		}
	],
	"references": [
		{
			"url": "https://git.kernel.org/stable/c/1fc793d68d50dee4782ef2e808913d5dd880bcc6",
			"description": "MISC:https://git.kernel.org/stable/c/1fc793d68d50dee4782ef2e808913d5dd880bcc6"
		},
		{
			"url": "https://git.kernel.org/stable/c/559d697c5d072593d22b3e0bd8b8081108aeaf59",
			"description": "MISC:https://git.kernel.org/stable/c/559d697c5d072593d22b3e0bd8b8081108aeaf59"
		},
		{
			"url": "https://git.kernel.org/stable/c/7626b9fed53092aa2147978070e610ecb61af844",
			"description": "MISC:https://git.kernel.org/stable/c/7626b9fed53092aa2147978070e610ecb61af844"
		},
		{
			"url": "https://git.kernel.org/stable/c/96b2e1090397217839fcd6c9b6d8f5d439e705ed",
			"description": "MISC:https://git.kernel.org/stable/c/96b2e1090397217839fcd6c9b6d8f5d439e705ed"
		},
		{
			"url": "https://git.kernel.org/stable/c/9d4c75800f61e5d75c1659ba201b6c0c7ead3070",
			"description": "MISC:https://git.kernel.org/stable/c/9d4c75800f61e5d75c1659ba201b6c0c7ead3070"
		},
		{
			"url": "https://git.kernel.org/stable/c/cd1189956393bf850b2e275e37411855d3bd86bb",
			"description": "MISC:https://git.kernel.org/stable/c/cd1189956393bf850b2e275e37411855d3bd86bb"
		},
		{
			"url": "https://git.kernel.org/stable/c/f6a7182179c0ed788e3755ee2ed18c888ddcc33f",
			"description": "MISC:https://git.kernel.org/stable/c/f6a7182179c0ed788e3755ee2ed18c888ddcc33f"
		},
		{
			"url": "https://git.kernel.org/stable/c/fe80658c08e3001c80c5533cd41abfbb0e0e28fd",
			"description": "MISC:https://git.kernel.org/stable/c/fe80658c08e3001c80c5533cd41abfbb0e0e28fd"
		}
	]
}
